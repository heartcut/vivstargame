@page "/game"
@page "/game/{lobbynumber:int}"
@inject NavigationManager navManager
@implements IAsyncDisposable
@using System.Threading;

<h3>GamePage</h3>
<cant-select-zone @onmousemove="MyMouseMoved" id="@MV.MyCursorStyle">
    <PlayerCursors MV="MV" />
    
    <game-window>
        <player1window style="@MV.ponezone">
        </player1window>
        <player2window style="@MV.ptwozone">
        </player2window>
        <player3window style="@MV.pthreezone">
        </player3window>
        <player4window style="@MV.pfourzone">
        </player4window>
    </game-window>
    <div style="color: yellow; left: 50%; transform: translateX(-50%); bottom: 20px; position: fixed;font-size:larger;">timer</div>
   

</cant-select-zone>
<div style="color: white; left: 50%; transform: translateX(-50%); bottom: 2px; position: fixed;">
    @*total players in lobby: doesnt work now  you player: @MV.PlayerIAm  you are in lobby: @lobbynumber
    <div style="color:yellow">your weidth and height of screen @MV.Width-@MV.Height</div>
    <div style="color:yellow">your curs pos normalized @MV.mycursx-@MV.mycursy</div>
    <div style="color:yellow">ingame @gamestarted</div>>*@
</div>

@code {

    [Parameter]
    public int lobbynumber { get; set; }

    private HubConnection hubConnection;

    bool gamestarted = false;
    protected MyValues MV = new MyValues();

    protected override void OnAfterRender(bool firstrender)
    {
        
    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(navManager.ToAbsoluteUri("/mainhub")).Build();

        //hub listeners here
        hubConnection.On<int, double, double>("AMouseMoved", TheyMoved);
        hubConnection.On<int>("GetMyPlayerNumber", (int playernumber) => {
            MV.PlayerIAm = playernumber;

            MV.MyCursorStyle = "p" + MV.PlayerIAm;
            
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        });
        hubConnection.On("AmIFull", () => navManager.NavigateTo("/lobbyfull"));
        hubConnection.On("SomeoneLeft", () => { navManager.NavigateTo("/someoneleft"); StateHasChanged(); });
        //hubConnection.On<string>("StartTimeSet", (starttime) => { displaytime = starttime; StateHasChanged(); });

        MV.MyLobby = lobbynumber;
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGameGroup",MV.MyLobby);
        //join game group calls a listener below to assaign mv.playernumber
        StateHasChanged();
    }
    
    //for the js
    [Inject]
    protected BrowserService Service { get; set; }
    async Task MyMouseMoved(MouseEventArgs e)
    {

        //js the four below
        var dimension = await Service.GetDimensions();
        MV.Height = dimension.Height;
        MV.Width = dimension.Width;
        MV.MouseMoved(e);

        await hubConnection.SendAsync("Moved", MV.PlayerIAm, MV.MyLobby, MV.mycursx, MV.mycursy);
    }
    void TheyMoved(int player, double x, double y)
    {
        switch (player)
        {
            case 1: MV.P1Xcords = x; MV.P1Ycords = y; break;
            case 2: MV.P2Xcords = x; MV.P2Ycords = y; break;
            case 3: MV.P3Xcords = x; MV.P3Ycords = y; break;
            case 4: MV.P4Xcords = x; MV.P4Ycords = y; break;
        }
        InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }
    
    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("CloseGame", MV.MyLobby);
        await hubConnection.StopAsync();
    }
}